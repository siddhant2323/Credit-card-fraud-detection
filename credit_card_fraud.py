# -*- coding: utf-8 -*-
"""Credit card fraud.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1MPmlMxyiiLXACn09d9JMSLTGvQZ6wDS5
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import plotly.express as px
import seaborn as sns
import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.svm import SVC
from sklearn.metrics import accuracy_score, confusion_matrix, classification_report, roc_auc_score, roc_curve

import warnings
warnings.filterwarnings("ignore")

from google.colab import drive
drive.mount('/content/drive')

data = pd.read_csv('/content/drive/My Drive/creditcard_2023.csv')

print(data.head())

print(data.info())

print(data.describe())

data.columns

data.isnull().sum()

data.Class.value_counts

# Visualizing outliers using boxplot
plt.figure(figsize=(12, 6))
sns.boxplot(data=data)
plt.xticks(rotation=90)
plt.show()

# Correlation matrix
correlation_matrix = data.corr()

# Plot heatmap
plt.figure(figsize=(20,16))
sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm', fmt='.2f')
plt.show()

# Visualize class distribution
sns.countplot(x='Class', data=data)
plt.show()

X = data.drop('Class', axis=1)  # Features
y = data['Class']  # Target variable

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Apply SMOTE for oversampling
smote = SMOTE(random_state=42)
X_train_resampled, y_train_resampled = smote.fit_resample(X_train, y_train)

# Initialize and train the Logistic Regression model
model = LogisticRegression(penalty='l2', max_iter=1000, random_state=42)
model.fit(X_train_resampled, y_train_resampled)

# Make predictions
y_pred = model.predict(X_test)

# Evaluate the model
print("Classification Report:")
print(classification_report(y_test, y_pred))

print("Confusion Matrix:")
print(confusion_matrix(y_test, y_pred))

# AUC score
y_pred_prob = model.predict_proba(X_test)[:, 1]  # Probabilities for the positive class
print("ROC-AUC Score:", roc_auc_score(y_test, y_pred_prob))

import joblib
joblib.dump(model, 'model.pkl')

from google.colab import files
files.download('model.pkl')